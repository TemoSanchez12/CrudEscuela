@using CrudEscuela.Shared.Student.Definition;
@using CrudEscuela.Shared;
@using CrudEscuela.Shared.Student;

@inject SweetAlertService Sweet;
@inject ILogger<StudentList> Logger;
@inject HttpClient HttpClient;
@attribute [Route(Routes.Student.StudentList)]

<h3>Lista de estudiantes</h3>

<a href="@Routes.Student.CreateStudent" class="btn btn-primary mt-3 mb-3">Agregar nuevo estudiante</a>

@if ( Students.Any() && !loading )
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nombre</th>
                <th scope="col">Apellidos</th>
                <th scope="col">Fecha de nacimiento</th>
                <th scope="col">Género</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach ( var student in Students )
            {
                <tr>
                    <th scope="row">@student.Id</th>
                    <td>@student.Name</td>
                    <td>@student.LastName</td>
                    <td>@student.BirthDate.ToString("dd/MM/yyyy")</td>
                    <td>@student.Genre.ToString()</td>
                    <td>
                        <span class="d-flex gap-1">

                            <a href="@Routes.InjectId(Routes.Student.UpdateStudent, student.Id.ToString())" class="btn btn-primary">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </a>

                            <button class="btn btn-danger" @onclick="(async () => await DeleteStudentHandler(student.Id))">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </button>
                        </span>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
else if ( !Students.Any() && loading )
{
    <p>Cargando estudiantes</p>
}
else
{
    <p>Aún no hay estudiantes registrados</p>
}


@code {
    private bool loading = false;
    private List<StudentDefinition> Students = new List<StudentDefinition>();

    private async Task LoadStudents()
    {
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });

        try
        {
            var response = await HttpClient.GetAsync("/api/Student/getAll");
            var content = await response.Content.ReadFromJsonAsync<ServiceResponse<GetAllStudentsResponse>>();

            if ( content == null )
                throw new Exception();


            if ( content.Success && content.Data != null )
            {
                Students = content.Data.Students;
            }
            else if ( !content.Success )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = content.Message
                    });
            }

        }
        catch ( Exception ex )
        {
            Logger.LogError(ex, "Something went wrong while fetching all students");
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Algo ha salido mal al soliciar todos los estudiantes"
                });
        }
    }


    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Fetching all students");
        loading = true;
        await LoadStudents();
        loading = false;
    }

    private async Task DeleteStudentHandler(Guid studentId)
    {
        Logger.LogInformation("Deleting student with id {StudentId}", studentId);

        var result = await Sweet.FireAsync(new SweetAlertOptions
            {
                Title = "¿Esta seguro?",
                Text = "El estudiante será elminado permanentemente",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, conservar"
            });

        if ( !result.IsConfirmed ) return;


        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });

        try
        {
            var request = new DeleteStudentRequest { StudentId = studentId };
            var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "api/Student/deleteStudent");
            requestMessage.Content = JsonContent.Create(request);

            var response = await HttpClient.SendAsync(requestMessage);
            var content = await response.Content.ReadFromJsonAsync<ServiceResponse<DeleteStudentResponse>>();

            if ( content == null )
                throw new Exception();


            if ( content.Success && content.Data != null )
            {
                await LoadStudents();
                StateHasChanged();
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = $"Estudiante {content.Data.StudenRemoved.Name} eliminado correctament"
                    });

            }
            else if ( !content.Success )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = content.Message
                    });
            }

        }
        catch ( Exception ex )
        {
            Logger.LogError(ex, "Something went wrong while deleting student");
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Algo ha salido mal al eliminar estudiante"
                });
        }
    }
}
