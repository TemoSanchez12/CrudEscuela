@using CrudEscuela.Shared.Student.Definition;
@using CrudEscuela.Shared;
@using CrudEscuela.Shared.Student;
@using CrudEscuela.Shared.Utils;

@inject SweetAlertService Sweet;
@inject ILogger<CreateStudent> Logger;
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;

@attribute [Route(Routes.Student.CreateStudent)]

<h3>Crear estudiante</h3>

<EditForm Model="@request" OnValidSubmit="@CreateStudentHandler" style="width: min(90%, 600px); margin: 0 auto 0 0;" class="p-3 border border-light">
    <div class="form-control mb-3">
        <InputText class="form-control" @bind-Value="request.Name" placeholder="Nombre" />
    </div>

    <div class="form-control mb-3">
        <InputText class="form-control" @bind-Value="request.LastName" placeholder="Apellidos" />
    </div>

    <div class="form-control mb-3">
        <InputDate class="form-control" @bind-Value="request.BirthDate" placeholder="Fecha de nacimiento" />
    </div>

    <div class="form-control mb-3">
        <InputSelect class="form-select" @bind-Value="request.Genre" placeholder="Genero">
            <option value="Male" selected>Hombre</option>
            <option value="Female">Mujer</option>
            <option value="Other">Otro</option>
        </InputSelect>
    </div>

    <button class="btn btn-primary">Crear estudiante</button>
</EditForm>

@code {
    private CreateStudentRequest request = new CreateStudentRequest();

    private async Task CreateStudentHandler()
    {
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });
        try
        {

            var response = await HttpClient.PostAsJsonAsync("api/Student/createStudent", request);
            var content = await response.Content.ReadFromJsonAsync<ServiceResponse<CreateStudentResponse>>();


            if ( content == null )
                throw new Exception();


            if ( content.Success && content.Data != null )
            {
                NavigationManager.NavigateTo(Routes.Student.StudentList);
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = content.Message
                    });

            }
            else if ( !content.Success )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = content.Message
                    });
            }
        }
        catch ( Exception ex )
        {
            Logger.LogError(ex, "Something went wrong while creating students");
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Algo ha salido mal al crear estudiantes"
                });
        }
    }
}
